#!/bin/sh
# =============================================================================
# LISTINGBOOST PRE-COMMIT VALIDATION SYSTEM
# =============================================================================
# Comprehensive validation system for production-grade commits
# Last Updated: 2025-01-20

echo "üöÄ ListingBoost Pre-Commit Validation System"
echo "============================================="

# Exit on first error for strict validation
set -e

# Track validation phases
PHASE=1
TOTAL_PHASES=9

# =============================================================================
# PHASE 1: SECURITY VALIDATION
# =============================================================================
echo "[$PHASE/$TOTAL_PHASES] üîí Security Validation"
PHASE=$((PHASE + 1))

# Check for secrets/API tokens
echo "  üîç Checking for exposed secrets..."
if git diff --cached --name-only | xargs grep -l "apify_api_[A-Za-z0-9]\{20,\}" 2>/dev/null; then
    echo "  ‚ùå ERROR: Real API tokens detected!"
    echo "  üí° Use placeholders: 'YOUR_TOKEN_HERE'"
    exit 1
fi

# Check for sensitive environment variables
if git diff --cached --name-only | xargs grep -l "SUPABASE_SERVICE_ROLE_KEY.*=" 2>/dev/null; then
    SENSITIVE_FILES=$(git diff --cached --name-only | xargs grep -l "SUPABASE_SERVICE_ROLE_KEY.*=" 2>/dev/null | head -3)
    for file in $SENSITIVE_FILES; do
        if [ "$file" != ".env.local.example" ] && [ "$file" != "ENVIRONMENT_SETUP.md" ]; then
            echo "  ‚ùå ERROR: Real service role key in $file"
            echo "  üí° Only .env.local.example should contain placeholders"
            exit 1
        fi
    done
fi

# Check for hardcoded URLs (production vs development)
echo "  üîç Checking for hardcoded URLs..."
if git diff --cached --name-only | xargs grep -l "localhost:3000" 2>/dev/null; then
    LOCALHOST_FILES=$(git diff --cached --name-only | xargs grep -l "localhost:3000" 2>/dev/null)
    for file in $LOCALHOST_FILES; do
        # Allow localhost in config files and documentation
        if [[ ! "$file" =~ \.(md|example|config\.(js|ts))$ ]]; then
            echo "  ‚ö†Ô∏è  WARNING: Hardcoded localhost in $file"
            echo "  üí° Consider using environment variables"
        fi
    done
fi

echo "  ‚úÖ Security validation passed"

# =============================================================================
# PHASE 2: TODO.md SYNCHRONIZATION
# =============================================================================
echo "[$PHASE/$TOTAL_PHASES] üìã TODO.md Synchronization"
PHASE=$((PHASE + 1))

node scripts/check-todo-sync.js
if [ $? -ne 0 ]; then
    echo "  ‚ùå TODO.md synchronization failed"
    exit 1
fi

echo "  ‚úÖ TODO.md synchronization verified"

# =============================================================================
# PHASE 3: FILE SIZE VALIDATION
# =============================================================================
echo "[$PHASE/$TOTAL_PHASES] üìè File Size Validation" 
PHASE=$((PHASE + 1))

# Check staged files for size limits
git diff --cached --name-only | while read file; do
    if [ -f "$file" ]; then
        # Skip binary files and specific directories
        if [[ ! "$file" =~ \.(png|jpg|jpeg|gif|ico|woff|woff2|ttf)$ ]] && \
           [[ ! "$file" =~ ^(node_modules|\.next|dist)/ ]]; then
            
            lines=$(wc -l < "$file" 2>/dev/null || echo 0)
            
            # File size limits based on CLAUDE.md rules
            if [ "$lines" -gt 400 ]; then
                echo "  ‚ùå ERROR: $file exceeds 400 lines ($lines lines)"
                echo "  üí° Split into smaller files according to CLAUDE.md rules"
                exit 1
            elif [ "$lines" -gt 300 ]; then
                echo "  ‚ö†Ô∏è  WARNING: $file approaching size limit ($lines/400 lines)"
            fi
        fi
    fi
done

echo "  ‚úÖ File size validation passed"

# =============================================================================
# PHASE 4: CODE QUALITY & STANDARDS
# =============================================================================
echo "[$PHASE/$TOTAL_PHASES] üéØ Code Quality & Standards"
PHASE=$((PHASE + 1))

# Check for console.log in production code
echo "  üîç Checking for debug statements..."
CONSOLE_LOGS=$(git diff --cached --name-only | xargs grep -n "console\.log\|debugger\|alert(" 2>/dev/null | grep -v "\.test\." | grep -v "scripts/" | head -5)
if [ ! -z "$CONSOLE_LOGS" ]; then
    echo "  ‚ö†Ô∏è  WARNING: Debug statements found:"
    echo "$CONSOLE_LOGS"
    echo "  üí° Remove debug statements before committing to main"
fi

# Check for proper error handling patterns
echo "  üîç Checking error handling patterns..."
git diff --cached --name-only | grep -E "\.(ts|tsx|js|jsx)$" | while read file; do
    if [ -f "$file" ]; then
        # Check for try-catch in async functions
        if grep -q "async.*function\|async.*=>" "$file"; then
            if ! grep -q "try.*{" "$file"; then
                echo "  ‚ö†Ô∏è  WARNING: $file has async functions without try-catch"
            fi
        fi
    fi
done

# Check TypeScript strict mode compliance
echo "  üîç Checking TypeScript compliance..."
git diff --cached --name-only | grep -E "\.(ts|tsx)$" | while read file; do
    if [ -f "$file" ]; then
        # Check for 'any' type usage
        ANY_USAGE=$(grep -n ": any\|<any>" "$file" | wc -l)
        if [ "$ANY_USAGE" -gt 0 ]; then
            echo "  ‚ö†Ô∏è  WARNING: $file uses 'any' type ($ANY_USAGE occurrences)"
            echo "  üí° Use specific types or 'unknown' instead"
        fi
    fi
done

echo "  ‚úÖ Code quality validation passed"

# =============================================================================
# PHASE 5: GERMAN LOCALIZATION COMPLIANCE
# =============================================================================
echo "[$PHASE/$TOTAL_PHASES] üá©üá™ German Localization Compliance"
PHASE=$((PHASE + 1))

# Check UI components for German text
echo "  üîç Checking German localization..."
git diff --cached --name-only | grep -E "app/.*\.(tsx|ts)$|components/.*\.(tsx|ts)$" | while read file; do
    if [ -f "$file" ]; then
        # Check for English button text in UI components
        ENGLISH_TEXT=$(grep -i "sign in\|sign up\|log out\|save\|cancel\|delete\|edit" "$file" | grep -v "://" | head -3)
        if [ ! -z "$ENGLISH_TEXT" ]; then
            echo "  ‚ö†Ô∏è  WARNING: English text in UI file $file:"
            echo "$ENGLISH_TEXT"
            echo "  üí° Use German translations according to CLAUDE.md standards"
        fi
    fi
done

echo "  ‚úÖ Localization compliance checked"

# =============================================================================
# PHASE 6: DEPENDENCY & SECURITY UPDATES
# =============================================================================
echo "[$PHASE/$TOTAL_PHASES] üì¶ Dependency & Security Check"
PHASE=$((PHASE + 1))

# Check if package.json was modified
if git diff --cached --name-only | grep -q "package.json"; then
    echo "  üîç Package.json changes detected"
    
    # Check for package-lock.json sync
    if ! git diff --cached --name-only | grep -q "package-lock.json"; then
        echo "  ‚ö†Ô∏è  WARNING: package.json changed but package-lock.json not staged"
        echo "  üí° Run 'npm install' to update lock file"
    fi
    
    # TODO: Add security vulnerability check
    # npm audit --audit-level high > /dev/null 2>&1
    # if [ $? -ne 0 ]; then
    #     echo "  ‚ö†Ô∏è  WARNING: Security vulnerabilities detected"
    #     echo "  üí° Run 'npm audit fix' to resolve"
    # fi
fi

echo "  ‚úÖ Dependency validation passed"

# =============================================================================
# PHASE 7: DATABASE SCHEMA VALIDATION
# =============================================================================
echo "[$PHASE/$TOTAL_PHASES] üóÑÔ∏è  Database Schema Validation"
PHASE=$((PHASE + 1))

# Check for database migration changes
if git diff --cached --name-only | grep -q "supabase/migrations/"; then
    echo "  üîç Database migration changes detected"
    
    # Validate migration file naming
    git diff --cached --name-only | grep "supabase/migrations/" | while read file; do
        if [[ ! "$file" =~ supabase/migrations/[0-9]{8}_[0-9]{3}_[a-z_]+\.sql$ ]]; then
            echo "  ‚ö†Ô∏è  WARNING: Migration file naming doesn't follow convention: $file"
            echo "  üí° Use format: YYYYMMDD_NNN_description.sql"
        fi
    done
    
    # Check for destructive operations in migrations
    git diff --cached | grep "supabase/migrations/" -A 20 | while read line; do
        if echo "$line" | grep -qi "drop table\|drop column\|delete from"; then
            echo "  ‚ö†Ô∏è  WARNING: Destructive operation detected in migration"
            echo "  üí° Ensure data backup and rollback plan exists"
        fi
    done
fi

echo "  ‚úÖ Database validation passed"

# =============================================================================
# PHASE 8: BUILD VALIDATION
# =============================================================================
echo "[$PHASE/$TOTAL_PHASES] üî® Build Validation" 
PHASE=$((PHASE + 1))

# Check if this is a code change that could affect build
CODE_CHANGED=$(git diff --cached --name-only | grep -E "\.(ts|tsx|js|jsx|css|scss|json)$" | wc -l)

if [ "$CODE_CHANGED" -gt 0 ]; then
    echo "  üîç Code changes detected - running build validation..."
    
    # Run TypeScript type checking (production code only)
    echo "  üìù TypeScript type checking..."
    npx tsc --project tsconfig.production.json --noEmit
    if [ $? -ne 0 ]; then
        echo "  ‚ùå TypeScript errors detected!"
        echo "  üí° Fix type errors before committing"
        exit 1
    fi
    
    # Run Next.js build (quick validation)
    echo "  üèóÔ∏è Next.js build validation..."
    if npm run build 2>/dev/null; then
        echo "  ‚úÖ Build validation successful"
        # Clean up build artifacts to keep repo clean
        rm -rf .next/standalone .next/static .next/cache
    else
        echo "  ‚ùå Build failed - commit blocked!"
        echo "  üí° Fix build errors before committing"
        exit 1
    fi
else
    echo "  ‚ÑπÔ∏è No code changes - skipping build validation"
fi

echo "  ‚úÖ Build validation completed"

# =============================================================================
# PHASE 9: CODE FORMATTING & FINAL LINT
# =============================================================================
echo "[$PHASE/$TOTAL_PHASES] üé® Code Formatting & Linting"
PHASE=$((PHASE + 1))

# Run lint-staged for code formatting
npx lint-staged

echo "  ‚úÖ Code formatting completed"

# =============================================================================
# VALIDATION COMPLETE
# =============================================================================
echo ""
echo "üéâ All validation checks passed!"
echo "‚úÖ Commit approved for production standards"
echo ""

# Final commit message validation
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
    
    # Check commit message format
    if [[ ! "$COMMIT_MSG" =~ ^(feat|fix|docs|style|refactor|test|chore|security)(\(.+\))?:\ .+ ]]; then
        echo "üí° Consider using conventional commit format:"
        echo "   feat(scope): description"
        echo "   fix(scope): description"
        echo "   docs(scope): description"
        echo ""
    fi
fi

echo "üöÄ Ready for deployment to production!"